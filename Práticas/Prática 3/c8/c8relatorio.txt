1. Analise do código e detecção de erros:
No código não corrigido, é importante destacar a última iteração do loop ( *(destination + i) = *(source + i);). 
Esta operação ocorre no índice 26, que está fora dos limites da memória alocada para source, 
resultando em um acesso indevido à memória e comportamento indefinido.

3. Correção:
O loop é ajustado para iterar até 26 em vez de 27, garantindo que todas as atribuições estejam dentro dos limites 
válidos da memória alocada para source e destination.

-------------------------------------------------------------------------
-> Retorno do GDB no arquivo defeituoso:
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./c8.out...
(gdb) run
Starting program: /mnt/c/Users/Acer/Documents/2023-02/ED/Prática 3/c8/c8.out
[Inferior 1 (process 248) exited normally]
(gdb) quit

-------------------------------------------------------------------------
-> Retorno do Valgrind no arquivo defeituoso:
$ valgrind --leak-check=full ./c8.out
==258== Memcheck, a memory error detector
==258== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==258== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==258== Command: ./c8.out
==258==
==258== Invalid read of size 1
==258==    at 0x1091D2: main (c8.c:9)
==258==  Address 0x4a470ba is 0 bytes after a block of size 26 alloc'd
==258==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==258==    by 0x1091B1: main (c8.c:6)
==258==
==258==
==258== HEAP SUMMARY:
==258==     in use at exit: 0 bytes in 0 blocks
==258==   total heap usage: 2 allocs, 2 frees, 53 bytes allocated
==258==
==258== All heap blocks were freed -- no leaks are possible
==258==
==258== For lists of detected and suppressed errors, rerun with: -s
==258== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

-------------------------------------------------------------------------
-> Retorno do GDB no arquivo corrigido:
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./c8correto.out...
(gdb) run
Starting program: /mnt/c/Users/Acer/Documents/2023-02/ED/Prática 3/c8/c8correto.out
[Inferior 1 (process 254) exited normally]
(gdb) quit

-------------------------------------------------------------------------
-> Retorno do Valgrind no arquivo corrigido:
$ valgrind --leak-check=full ./c8correto.out
==259== Memcheck, a memory error detector
==259== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==259== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==259== Command: ./c8correto.out
==259==
==259==
==259== HEAP SUMMARY:
==259==     in use at exit: 0 bytes in 0 blocks
==259==   total heap usage: 2 allocs, 2 frees, 53 bytes allocated
==259==
==259== All heap blocks were freed -- no leaks are possible
==259==
==259== For lists of detected and suppressed errors, rerun with: -s
==259== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)