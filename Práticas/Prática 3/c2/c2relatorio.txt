1. Analise do código e detecção de erros:
No código não corrigido, o código itera de 0 a 8 (ou seja, 9 elementos) e atribui valores a esses elementos do array
(a), de tamanho 10. Contudo, ao imprimir esses valores, o código tenta acessar a[9], o que resulta em um acesso 
indevido à memória, pois a[9] não foi inicializado.

3. Correção:
Aqui, o acesso aos elementos de a está dentro dos limites válidos do array, portanto, não há erro de acesso
indevido à memória.

-------------------------------------------------------------------------
-> Retorno do GDB no arquivo defeituoso:
$ gdb ./c2.out
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./c2.out...
(gdb) run
Starting program: /mnt/c/Users/Acer/Documents/2023-02/ED/Prática 3/c2/c2.out
0 1 2 3 4 5 6 7 8 32767
[Inferior 1 (process 110) exited normally]
(gdb) quit

-------------------------------------------------------------------------
-> Retorno do Valgrind no arquivo defeituoso:
$ valgrind --leak-check=full ./c2.out
==120== Memcheck, a memory error detector
==120== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==120== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==120== Command: ./c2.out
==120==
==120== Conditional jump or move depends on uninitialised value(s)
==120==    at 0x48C9958: __vfprintf_internal (vfprintf-internal.c:1687)
==120==    by 0x48B3D3E: printf (printf.c:33)
==120==    by 0x1091EE: main (c2.c:11)
==120==
==120== Use of uninitialised value of size 8
==120==    at 0x48AD69B: _itoa_word (_itoa.c:179)
==120==    by 0x48C9574: __vfprintf_internal (vfprintf-internal.c:1687)
==120==    by 0x48B3D3E: printf (printf.c:33)
==120==    by 0x1091EE: main (c2.c:11)
==120==
==120== Conditional jump or move depends on uninitialised value(s)
==120==    at 0x48AD6AD: _itoa_word (_itoa.c:179)
==120==    by 0x48C9574: __vfprintf_internal (vfprintf-internal.c:1687)
==120==    by 0x48B3D3E: printf (printf.c:33)
==120==    by 0x1091EE: main (c2.c:11)
==120==
==120== Conditional jump or move depends on uninitialised value(s)
==120==    at 0x48CA228: __vfprintf_internal (vfprintf-internal.c:1687)
==120==    by 0x48B3D3E: printf (printf.c:33)
==120==    by 0x1091EE: main (c2.c:11)
==120==
==120== Conditional jump or move depends on uninitialised value(s)
==120==    at 0x48C96EE: __vfprintf_internal (vfprintf-internal.c:1687)
==120==    by 0x48B3D3E: printf (printf.c:33)
==120==    by 0x1091EE: main (c2.c:11)
==120==
0 1 2 3 4 5 6 7 8 31
==120==
==120== HEAP SUMMARY:
==120==     in use at exit: 0 bytes in 0 blocks
==120==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated
==120==
==120== All heap blocks were freed -- no leaks are possible
==120==
==120== Use --track-origins=yes to see where uninitialised values come from
==120== For lists of detected and suppressed errors, rerun with: -s
==120== ERROR SUMMARY: 7 errors from 5 contexts (suppressed: 0 from 0)

-------------------------------------------------------------------------
-> Retorno do GDB no arquivo corrigido:
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./c2correto.out...
(gdb) run
Starting program: /mnt/c/Users/Acer/Documents/2023-02/ED/Prática 3/c2/c2correto.out
q0 1 2 3 4 5 6 7 8 9
[Inferior 1 (process 116) exited normally]
(gdb) quit

-------------------------------------------------------------------------
-> Retorno do Valgrind no arquivo corrigido:
$ valgrind --leak-check=full ./c2correto.out
==121== Memcheck, a memory error detector
==121== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==121== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==121== Command: ./c2correto.out
==121==
0 1 2 3 4 5 6 7 8 9
==121==
==121== HEAP SUMMARY:
==121==     in use at exit: 0 bytes in 0 blocks
==121==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated
==121==
==121== All heap blocks were freed -- no leaks are possible
==121==
==121== For lists of detected and suppressed errors, rerun with: -s
==121== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)